{{- $os := .chezmoi.os }}
{{- $arch := .chezmoi.arch }}
{{- $os_alt := .os.alt }}
{{- $arch_alt := .arch.alt }}
{{- $os_arch := .osarch }}

{{- $libc := "" }}
{{- $libc_alt := "" }}
{{- if eq $os "linux" }}
{{-   $libc = output (joinPath .chezmoi.sourceDir "getlibc.sh") }}
{{-   $libc_alt = (eq $libc "glibc") | ternary "gnu" "musl" }}
{{- end }}

.tmux.conf:
  type: "file"
  url: "https://github.com/gpakosz/.tmux/raw/master/.tmux.conf"
  exact: true
  refreshPeriod: "168h"

# region oh-my-bash extras ##############################################################
.local/oh-my-bash:
  type: "archive"
  url: "https://github.com/ohmybash/oh-my-bash/archive/master.tar.gz"
  exact: true
  stripComponents: 1
  refreshPeriod: "168h"
# endregion #############################################################################

# region oh-my-zsh extras ###############################################################
.local/oh-my-zsh:
  type: "archive"
  url: "https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz"
  exact: true
  stripComponents: 1
  refreshPeriod: "168h"
.local/oh-my-zsh/custom/plugins/zsh-syntax-highlighting:
  type: "archive"
  url: "https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz"
  exact: true
  stripComponents: 1
  refreshPeriod: "168h"
.local/oh-my-zsh/custom/plugins/zsh-history-substring-search:
  type: "archive"
  url: "https://github.com/zsh-users/zsh-history-substring-search/archive/master.tar.gz"
  exact: true
  stripComponents: 1
  refreshPeriod: "168h"
.local/oh-my-zsh/custom/plugins/zsh-autosuggestions:
  type: "archive"
  url: "https://github.com/zsh-users/zsh-autosuggestions/archive/master.tar.gz"
  exact: true
  stripComponents: 1
  refreshPeriod: "168h"
.local/oh-my-zsh/custom/plugins/fast-syntax-highlighting:
  type: "archive"
  url: "https://github.com/zdharma-continuum/fast-syntax-highlighting/archive/master.tar.gz"
  exact: true
  stripComponents: 1
  refreshPeriod: "168h"
.local/oh-my-zsh/custom/plugins/zsh-autopair:
  type: "archive"
  url: "https://github.com/hlissner/zsh-autopair/archive/master.tar.gz"
  exact: true
  stripComponents: 1
  refreshPeriod: "168h"
# endregion #############################################################################

.local/SpaceVim:
  type: "git-repo"
  url: "https://gitlab.com/SpaceVim/SpaceVim.git"
  refreshPeriod: "168h"

.local/doom-emacs:
  type: "git-repo"
  url: "https://github.com/hlissner/doom-emacs.git"
  refreshPeriod: "168h"

.local/spacemacs:
  type: "git-repo"
  url: "https://github.com/syl20bnr/spacemacs.git"
  refreshPeriod: "168h"

.emacs.d:
  type: "git-repo"
  url: "https://github.com/plexus/chemacs2.git"
  refreshPeriod: "168h"

{{- $fzfRelease := gitHubLatestRelease "junegunn/fzf" }}
{{- $fzf := "" }}
{{- range $asset := $fzfRelease.Assets }}
{{-   if and (contains $os $asset.Name) (contains $arch $asset.Name) }}
{{-     $fzf = $asset }}
{{-     break }}
{{-   end }}
{{- end }}
.local/bin/fzf:
  type: "archive-file"
  url: {{ $fzf.BrowserDownloadURL }}
  executable: true
  refreshPeriod: "168h"
  path: "fzf"

{{- $starshipRelease := gitHubLatestRelease "starship/starship" }}
{{- $starship := "" }}
{{- range $asset := $starshipRelease.Assets }}
{{-   if and (contains ".tar.gz" $asset.Name) (contains $os $asset.Name) (contains $arch_alt $asset.Name) }}
{{-     if and (eq $os_arch "linux-arm64") (contains "musl" $asset.Name) }}
{{-       $starship = $asset }}
{{-     else if and (eq $os_arch "linux-amd64") (contains $libc $asset.Name) }}
{{-       $starship = $asset }}
{{-     else }}
{{-       $starship = $asset }}
{{-     end }}
{{-     break }}
{{-   end }}
{{- end }}
.local/bin/starship:
  type: "archive-file"
  url: {{ $starship.BrowserDownloadURL }}
  refreshPeriod: "168h"
  executable: true
  path: "starship"

{{- $direnvRelease := gitHubLatestRelease "direnv/direnv" }}
{{- $direnv := "" }}
{{- range $asset := $direnvRelease.Assets }}
{{-   if and (contains $os $asset.Name) (contains $arch $asset.Name) }}
{{-     $direnv = $asset }}
{{-     break }}
{{-   end }}
{{- end }}
.local/bin/direnv:
  type: "file"
  url: {{ $direnv.BrowserDownloadURL }}
  executable: true
  refreshPeriod: "168h"

{{- $ghRelease := gitHubLatestRelease "cli/cli" }}
{{- $ghOS := (eq $os "darwin") | ternary "macOS" .chezmoi.os }}
{{- $ghSuffix := (eq $os "darwin") | ternary ".zip" ".tar.gz" }}
{{- $gh := "" }}
{{- range $asset := $ghRelease.Assets }}
{{-   if and (contains $ghSuffix $asset.Name) (contains $ghOS $asset.Name) (contains $arch $asset.Name) }}
{{-     $gh = $asset }}
{{-     break }}
{{-   end }}
{{- end }}
.local/bin/gh:
  type: "archive-file"
  url: {{ $gh.BrowserDownloadURL }}
  refreshPeriod: "168h"
  executable: true
  stripComponents: 1
  path: "bin/gh"
.local/share/man/man1/gh:
  type: "archive"
  url: {{ $gh.BrowserDownloadURL }}
  refreshPeriod: "168h"
  stripComponents: 1
  include: ["share/man/man1/*.1"]

{{- $asdf := gitHubLatestRelease "asdf-vm/asdf" }}
.local/asdf:
  type: "archive"
  url: {{ $asdf.TarballURL }}
  refreshPeriod: "168h"

{{- $rcloneRelease := gitHubLatestRelease "rclone/rclone" }}
{{- $rclone := "" }}
{{- $rcloneOS := (eq $os "darwin") | ternary "osx" .chezmoi.os }}
{{- range $asset := $rcloneRelease.Assets }}
{{-   if and (contains ".zip" $asset.Name) (contains $rcloneOS $asset.Name) (contains $arch $asset.Name) }}
{{-     $rclone = $asset }}
{{-     break }}
{{-   end }}
{{- end }}
{{- $rcloneDir := splitList (ext $rclone.Name) $rclone.Name | first }}
.local/bin/rclone:
  type: "archive-file"
  url: {{ $rclone.BrowserDownloadURL }}
  refreshPeriod: "168h"
  executable: true
  stripComponents: 1
  path: "rclone"
.local/share/man/man1/rclone.1:
  type: "archive-file"
  url: {{ $rclone.BrowserDownloadURL }}
  refreshPeriod: "168h"
  stripComponents: 1
  path: "rclone.1"

# {{- $juliaupRelease := gitHubLatestRelease "JuliaLang/juliaup" }}
# {{- $juliaup := "" }}
# {{- range $asset := $juliaupRelease.Assets }}
# {{-   if and (contains $os $asset.Name) (contains $arch_alt $asset.Name) }}
# {{-     $juliaup = $asset }}
# {{-     break }}
# {{-   end }}
# {{- end }}
# .local/bin/julia:
#   type: "archive"
#   url: {{ $juliaup.BrowserDownloadURL }}
#   refreshPeriod: "168h"
#   executable: true
#   include: ["julia"]
#
# .local/bin/juliaup:
#   type: "archive"
#   url: {{ $juliaup.BrowserDownloadURL }}
#   refreshPeriod: "168h"
#   executable: true
#   include: ["juliaup"]

{{- if eq $os "linux" }}
.local/bin/nvim:
    type: "file"
    url: "https://github.com/neovim/neovim/releases/download/stable/nvim.appimage"
    refreshPeriod: "672h"
    executable: true

{{- $ezaRelease := gitHubLatestRelease "eza-community/eza" }}
{{- $eza := "" }}
{{- range $asset := $ezaRelease.Assets }}
{{-   if and (contains $os $asset.Name) (contains $arch_alt $asset.Name) (contains $libc_alt $asset.Name) }}
{{-     $eza = $asset }}
{{-     break }}
{{-   end }}
{{- end }}
.local/bin/eza:
    type: "archive-file"
    url: {{ $eza.BrowserDownloadURL }}
    executable: true
    path: "./eza"

{{- $gduRelease := gitHubLatestRelease "dundee/gdu" }}
{{- $gdu := "" }}
{{- range $asset := $gduRelease.Assets }}
{{-   if and (contains ".tgz" $asset.Name) (contains $os $asset.Name) (contains $arch $asset.Name) }}
{{-     $gdu = $asset }}
{{-     break }}
{{-   end }}
{{- end }}
.local/bin/gdu:
    type: "archive-file"
    url: {{ $gdu.BrowserDownloadURL }}
    executable:  true
    path: {{ (splitList "." $gdu.Name) | first }}
{{- end }}

{{/* vim: set filetype=yaml.chezmoitmpl: sw=2 ts=2 et */}}
